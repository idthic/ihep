#!/bin/bash

_ihep_bash=$((BASH_VERSINFO[0]*10000+BASH_VERSINFO[1]*100+BASH_VERSINFO[2]))
if ((_ihep_bash < 30000)); then
  printf '%s\n' "ihep: unsupported Bash version: $BASH_VERSION" >&2
  exit 1
fi

#------------------------------------------------------------------------------
# ihep/util/readlink

## The implementation is taken from "ble/util/readlink" from ble.sh
## <https://github.com/akinomyoga/ble.sh>.

function ihep/util/print { printf '%s\n' "$1"; }

if ((_ihep_bash >= 40000)); then
  _ihep_util_readlink_visited_init='local -A visited=()'
  function ihep/util/readlink/.visited {
    [[ ${visited[$1]+set} ]] && return 0
    visited[$1]=1
    return 1
  }
else
  _ihep_util_readlink_visited_init="local -a visited=()"
  function ihep/util/readlink/.visited {
    local key
    for key in "${visited[@]}"; do
      [[ $1 == "$key" ]] && return 0
    done
    visited=("$1" "${visited[@]}")
    return 1
  }
fi

## @fn ihep/util/readlink/.readlink path
##   @var[out] link
function ihep/util/readlink/.readlink {
  local path=$1
  if declare -F readlink &>/dev/null; then
    link=$(readlink -- "$path")
    [[ $link ]]
  elif ihep/bin#has ls; then
    link=$(ls -ld -- "$path") &&
      [[ $link == *" $path -> "?* ]] &&
      link=${link#*" $path -> "}
  else
    false
  fi
} 2>/dev/null

## @fn  ihep/util/readlink/.resolve_physical_directory
##   @var[in,out] path
function ihep/util/readlink/.resolve_physical_directory {
  [[ $path == */?* ]] || return 0
  local PWD=$PWD OLDPWD=$OLDPWD CDPATH=
  builtin cd -L . &&
    local pwd=$PWD &&
    builtin cd -P "${path%/*}/" &&
    path=${PWD%/}/${path##*/}
  builtin cd -L "$pwd"
  return 0
}

function ihep/util/readlink/.resolve_loop {
  local path=$1
  builtin eval -- "$_ihep_util_readlink_visited_init"
  while [[ -h $path ]]; do
    local link
    ihep/util/readlink/.visited "$path" && break
    ihep/util/readlink/.readlink "$path" || break
    if [[ $link == /* || $path != */* ]]; then
      path=$link
    else
      ihep/util/readlink/.resolve_physical_directory
      path=${path%/}/$link
    fi
    while [[ $path == ?*/ ]]; do path=${path%/}; done
  done
  ihep/util/print "$path"
}

function ihep/util/readlink/.resolve {
  # Select implementation on the first call
  _ihep_util_readlink_type=

  case $OSTYPE in
  (cygwin | msys | linux-gnu)
    # These systems provide "readlink -f".
    local readlink
    readlink=$(type -P readlink)
    case $readlink in
    (/bin/readlink | /usr/bin/readlink)
      # shellcheck disable=SC2100
      _ihep_util_readlink_type=readlink-f
      function ihep/util/readlink/.resolve { readlink -f -- "$1"; } ;;
    esac ;;
  esac

  if [[ ! $_ihep_util_readlink_type ]]; then
    _ihep_util_readlink_type=loop
    function ihep/util/readlink/.resolve { ihep/util/readlink/.resolve_loop "$1"; }
  fi

  ihep/util/readlink/.resolve "$1"
}

function ihep/util/readlink {
  if [[ -h $1 ]]; then
    ihep/util/readlink/.resolve "$1"
  else
    ihep/util/print "$1"
  fi
}

#------------------------------------------------------------------------------

function ihep/base/initialize {
  unset -f "$FUNCNAME"

  # _ihep_base
  local bin_path=$(ihep/util/readlink "$BASH_SOURCE")
  if [[ $bin_path != /* ]]; then
    bin_path=$PWD/${bin_path#./}
  fi
  _ihep_base=${bin_path%/*}
  [[ $_ihep_base ]] || _ihep_base=/

  # other directories
  _ihep_base_data=~/.local/share/ihep
  _ihep_base_state=~/.local/state/ihep
  _ihep_base_run=$_ihep_base/tmp
}
ihep/base/initialize

function ihep/sub:install {
  local src=$_ihep_base/ihep
  local dst=~/.local/bin/ihep
  if [[ $BASH_SOURCE == "$dst" || $src == "$dst" ]]; then
    # it is already installed
    return 0
  fi

  [[ -x $src ]] &&
    mkfd "$dst" &&
    ln -sf "$src" "$dst"
}

# 2024-06-18
_ihep_user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'


function print { ihep/util/print "$@"; }
function string#match { [[ $1 =~ $2 ]]; }
function string#split {
  local IFS=$2 _txt=$3
  set -f
  builtin eval -- "$1=(\$_txt)"
  set +f
  return 0
}
if ((_ihep_bash>=30100)); then
  function array#push {
    (($# >= 2)) || return 0
    builtin eval "$1+=(\"\${@:2}\")"
  }
else
  function array#push {
    (($# >= 2)) || return 0
    builtin eval "$1=(\"\${$1[@]}\" \"\${@:2}\")"
  }
fi
function ihep/bin#has { type -t -- "$1" &>/dev/null; }

function ihep/base/check-environment {
  unset -f "$FUNCNAME"
  local flags=

  _ihep_bin_node=$(type -P node 2>/dev/null)
  if [[ ! $_ihep_bin_node ]]; then
    print 'ihep: The command "node" (Node.js) is not found.' >&2
    flags=E$flags
  fi

  if ! ihep/bin#has rsync; then
    print 'ihep: The command "rsync" is not found.' >&2
    flags=E$flags
  fi

  [[ $flags != *E* ]]
}
ihep/base/check-environment || exit 1

#------------------------------------------------------------------------------
# utilities

function mkd {
  if [[ $1 && ! -d $1 ]]; then
    mkdir -p "$1"
  fi
}
function mkfd {
  if [[ $1 == */* ]]; then
    mkd "${1%/*}"
  fi
}

function dl {
  local url=$1 dst=$2
  local referer=
  if [[ $_ihep_cookies ]]; then
    mkfd "$_ihep_cookies"
    >> "$_ihep_cookies"
  fi
  wget \
    --no-verbose --show-progress \
    --user-agent="$_ihep_user_agent" ${referer:+--referer="$REFERER"} \
    ${_ihep_cookies:+--load-cookies "$_ihep_cookies" --save-cookies "$_ihep_cookies" --keep-session-cookies} \
    -4 --retry-on-http-error=522,524 -t 5 \
    "$url" -O "$dst.part" &&
    mv "$dst.part" "$dst"
}

function ihep/util/date {
  if ((_ihep_bash>=40200)); then
    printf -v REPLY '%(%F)T' -1
  else
    REPLY=(date +%F)
  fi
}

function ihep/util/open {
  local file=$1
  case $file in
  (*.pdf)
    if [[ $_ihep_config_open_cmd_pdf ]]; then
      builtin eval -- "$_ihep_config_open_cmd_pdf \"\$file\""
      return "$?"
    fi ;;
  esac

  if [[ $_ihep_config_open_cmd ]]; then
    builtin eval -- "$_ihep_config_open_cmd \"\$file\""
  elif ihep/bin#has cygstart; then
    cygstart "$file"
  elif ihep/bin#has wslstart; then
    wslstart "$file"
  elif ihep/bin#has xdg-open; then
    xdg-open "$file"
  elif ihep/bin#has open; then
    open "$file"
  else
    print "ihep: no resolver for '$file' found." >&2
    print "$file"
  fi
}

function ihep/util/fold {
  if ihep/bin#has ifold; then
    ifold -s -w 79 --no-text-justify
  elif ihep/bin#has fold; then
    fold -sw 79
  else
    cat
  fi
}

function ihep/util/node {
  local -a args
  args=("$@")
  if [[ $_ihep_bin_node == /cygdrive/* ]] && ihep/bin#has cygpath; then
    local i
    for i in "${!args[@]}"; do
      [[ ${args[i]} == /* && ( -e ${args[i]} || -e ${args[i]%/*} ) ]] &&
        args[i]=$(cygpath -w "${args[i]}")
    done
  fi
  "$_ihep_bin_node" "${args[@]}"
}

function dl-inspirehep {
  local _ihep_cookies=$_ihep_base_run/inspirehep.cookies.txt
  dl "$@"
}

_ihep_config_remote=
_ihep_config_open_cmd=
_ihep_config_open_cmd_pdf=
if [[ -s ~/.config/ihep/config.bash ]]; then
  source ~/.config/ihep/config.bash
fi

#------------------------------------------------------------------------------
# ihep/metadata

_ihep_sep=''
_ihel_term_nl=$'\n'
function ihep/metadata/.sanitize-value {
  local _var _val
  for _var; do
    [[ ${!_var} == *["$_ihep_sep$_ihel_term_nl"]* ]] || continue
    _val=${!_var}
    _val=${_val//["$_ihep_sep$_ble_term_nl"]/ }
    printf -v "$_var" %s "$_val"
  done
}

## @var _ihep_fname_metadata
##   This is the filename that stores the metadata.  Each line consists of the
##   following fields separated by _ihep_sep (^^).
##
##   - $1 = texkey
##   - $2 = inspire
##   - $3 = arxiv
##   - $4 = url
##   - $5 = title
##   - $6 = authors
##   - $7 = abstract
##
_ihep_fname_metadata=$_ihep_base_data/literature.metadata.txt

## @fn ihep/metadata/load-by-column column value
##   @var[out] REPLY
function ihep/metadata/load-by-column {
  [[ -s $_ihep_fname_metadata ]] || return 1
  local -x value=$2
  local script='
    BEGIN { value = ENVIRON["value"]; }
    $'$1' == value { print; is_found = 1; exit 0; }
    END { if (!is_found) exit 1; }
  '
  local result=$(awk -F "$_ihep_sep" "$script" "$_ihep_fname_metadata")
  [[ $result ]] || return 1
  string#split REPLY "$_ihep_sep" "$result"
}
## @fn ihep/metadata/load-by-texkey value
##   @var[out] REPLY
function ihep/metadata/load-by-texkey {
  ihep/metadata/load-by-column 1 "$1"
}
## @fn ihep/metadata/load-by-arxiv value
##   @var[out] REPLY
function ihep/metadata/load-by-arxiv {
  ihep/metadata/load-by-column 3 "$1"
}

## @fn ihep/metadata/has-texkey texkey
function ihep/metadata/has-texkey {
  [[ -s $_ihep_fname_metadata ]] || return 1
  local -x value=$1
  local script='
    BEGIN { value = ENVIRON["value"]; }
    $1 == value { is_found = 1; exit 0; }
    END { if (!is_found) exit 1; }
  '
  awk -F "$_ihep_sep" "$script" "$_ihep_fname_metadata"
}

## @fn ihep/metadata/identify text
##   @var[out] type
##   @var[out] value
function ihep/metadata/parse {
  if string#match "$1" '^(ar[Xx]iv:)?([0-9]{4}\.[0-9]{4,5})$'; then
    type=arxiv
    value=${BASH_REMATCH[2]}
    return 0
  elif string#match "$1" '^([A-Z][a-zA-Z0-9]+):?((19|20)[0-9]{2}[a-z]{2,3})$'; then
    type=texkey
    value=${BASH_REMATCH[1]}:${BASH_REMATCH[2]}
    return 0
  elif string#match "$1" '(^|/)([0-9]{4}\.[0-9]{4,5})(v[0-9]{1,2})?( \([0-9]{1,2}\))?\.pdf$'; then
    # A file downloaded from arXiv
    type=arxiv
    value=${BASH_REMATCH[2]}
    return 0
  elif string#match "$1" '(^|/)([A-Z][a-zA-Z0-9]+):?((19|20)[0-9]{2}[a-z]{2,3})( \([0-9]{1,2}\))?\.pdf$'; then
    # A file named by inspirehep texkey
    type=texkey
    value=${BASH_REMATCH[2]}:${BASH_REMATCH[3]}
    return 0
  else
    return 1
  fi
}

## @fn ihep/metadata/load/.fetch type value
##   Retrieve data from inspirehep.net
function ihep/metadata/load/.fetch {
  local type=$1 value=$2

  local search_url=
  case $type in
  (arxiv)
    search_url='https://inspirehep.net/api/literature?sort=mostrecent&size=25&page=1&q=arXiv%3A'$value ;;
  (texkey)
    search_url='https://inspirehep.net/api/literature?sort=mostrecent&size=25&page=1&q='${value//:/'%3A'} ;;
  (*)
    print "ihep: FATAL unrecognized type '$type'" >&2
    return 1 ;;
  esac

  local tmp1=$_ihep_base_run/search.json
  mkfd "$tmp1"
  dl-inspirehep "$search_url" "$tmp1"

  local metadata
  if ! metadata=$(ihep/util/node "$_ihep_base/inspire-extract-metadata.js" "$tmp1"); then
    print "ihep: failed to call inspire-extract-metadata" >&2
    return 1
  fi
  local texkey= inspire= arxiv= url= title= authors= abstract=
  builtin eval -- "$metadata"
  if [[ ! $texkey ]]; then
    print 'ihep: failed to determine the texkey' >&2
    return 1
  fi

  ihep/metadata/.sanitize-value texkey inspire arxiv url title authors abstract
  REPLY=("$texkey" "$inspire" "$arxiv" "$url" "$title" "$authors" "$abstract")

  if ! ihep/metadata/has-texkey "$texkey"; then
    mkfd "$_ihep_fname_metadata"
    {
      printf "%s$_ihep_sep" "${REPLY[@]}"
      printf '\n'
    } >> "$_ihep_fname_metadata"
  fi

  return 0
}

function ihep/metadata/load {
  local type= value=
  if ! ihep/metadata/parse "$1"; then
    print "ihep: unrecognized query '$1'" >&2
    return 2
  fi

  case $type in
  (arxiv) ihep/metadata/load-by-arxiv "$value" && return 0 ;;
  (texkey) ihep/metadata/load-by-texkey "$value" && return 0 ;;
  esac

  ihep/metadata/load/.fetch "$type" "$value"
}

function ihep/metadata/print-markdown/.escape {
  local _var _val
  for _var; do
    _val=${!_var}
    [[ $_val == *['<>&\_']* ]] || continue
    _val=${_val//'_'/'\_'}
    _val=${_val//'\'/'\\'}
    _val=${_val//'&'/'&amp;'}
    _val=${_val//'<'/'&lt;'}
    _val=${_val//'>'/'&gt;'}
    printf -v "$_var" %s "$_val"
  done
}

function ihep/metadata/print-abstract {
  local REPLY
  ihep/metadata/load "$1" || return 1

  local texkey=${REPLY[0]}
  local inspire=${REPLY[1]}
  local arxiv=${REPLY[2]}
  local url=${REPLY[3]}
  local title=${REPLY[4]}
  local authors=${REPLY[5]}
  local abstract=${REPLY[6]}

  ihep/metadata/print-markdown/.escape texkey inspire arxiv title authors abstract
  abstract=$(ihep/util/fold <<< "$abstract")

  [[ $inspire ]] && texkey="[$texkey](https://inspirehep.net/literature/$inspire)"
  [[ $arxiv ]] && arxiv="[[$arxiv](https://arxiv.org/abs/$arxiv)]"
  [[ $url ]] && url="[[PDF]($url)]"
  
  print "## $texkey$arxiv$url $title"
  print "Authors: $authors"
  print
  print "$abstract"
}

function ihep/metadata/print-header {
  local REPLY
  ihep/metadata/load "$1" || return 1

  local texkey=${REPLY[0]}
  local inspire=${REPLY[1]}
  local title=${REPLY[4]}
  local authors=${REPLY[5]}
  authors=${authors//?([[:space:]])(+([!()]))}
  if ((${#authors}>72)); then
    authors=${authors::72}
    authors="${authors%,*} et al."
  fi
  ihep/metadata/print-markdown/.escape texkey inspire title authors

  print "## **$texkey** $authors, $title"
  print "https://inspirehep.net/literature/$inspire"
}

function ihep/sub:abstract {
  ihep/metadata/print-abstract "$1"
}
function ihep/sub:header {
  ihep/metadata/print-header "$1"
}

## @fn ihep/metadata/append-header file texkey opts
function ihep/metadata/append-header {
  local file=$1 texkey=$2 opts=$3

  local -x date=
  if [[ :$opts: == *:date:* ]]; then
    local REPLY
    ihep/util/date; date=$REPLY
  fi

  if [[ -s $file ]]; then
    local script='
      BEGIN {
        date = ENVIRON["date"];

        is_found = 0;
        enabled = 0;
        if (date == "") enabled = 1;
      }
      date != "" && /^# '$date'$/ { enabled = 1; next; }
      date != "" && /^# [0-9]{4}-[0-9]{1,2}-[0-9]{1,2}/ { enabled = 0; next; }
      enabled && /^## \*\*'$texkey'\*\*/ { is_found = 1; exit 0; }
      END {
        if (!is_found) {
          if (date != "" && !enabled) exit 10; # we append date
          exit 1;
        }
      }
    '
    awk "$script" "$file"; local ext=$?
    if ((ext == 0)); then
      # We already have an entry in the file so don't have to do anything.
      return 0
    elif ((ext != 10)); then
      # We are already in the desired context at the end of the file.
      date=
    fi
  else
    mkfd "$file"
  fi

  {
    if [[ $date ]]; then
      print
      print "# $date"
    fi
    print
    ihep/metadata/print-header "$texkey"
  } >> "$file"
}

## @fn ihep/metadata/record texkey
function ihep/metadata/record {
  local texkey=$1

  local fname_access=$_ihep_base_state/access_log.md
  ihep/metadata/append-header "$fname_access" "$texkey" date

  local fname_references=references.md
  [[ -f $fname_references ]] &&
    ihep/metadata/append-header "$fname_references" "$texkey"
}

#------------------------------------------------------------------------------

function ihep/fulltext/find {
  local query=$1 opts=$2
  ihep/metadata/load "$query" || return "$?"

  local texkey=${REPLY[0]} url=${REPLY[3]}

  local fname_fulltext=$_ihep_base_data/fulltext/${texkey//:}.pdf
  if [[ ! -s $fname_fulltext ]]; then
    if [[ ! $url ]]; then
      print 'failed to determine the fulltext URL' >&2
      return 1
    fi
    mkfd "$fname_fulltext"
    if ! dl "$url" "$fname_fulltext"; then
      print 'failed to download the file.' >&2
      print "url=$url" >&2
      return 1
    fi
  fi

  REPLY=$fname_fulltext
  [[ :$opts: == *:record:* ]] &&
    ihep/metadata/record "$texkey"
  return 0
}

function ihep/sub:store {
  local file flags=
  for file; do
    if [[ $file != *.pdf ]]; then
      print "ihep: unrecognized file type '$file'" >&2
      flags=E$flags
      continue
    fi

    local REPLY
    if ! ihep/metadata/load "$file"; then
      print "ihep: unrecognized form of the filename '${file##*/}'" >&2
      flags=E$flags
      continue
    fi

    local texkey=${REPLY[0]}
    local fname_fulltext=$_ihep_base_data/fulltext/${texkey//:}.pdf
    if [[ -s $fname_fulltext ]]; then
      print "ihep: file '${file##*/}' already exists at '$fname_fulltext'." >&2
      flags=E$flags
      continue
    fi

    print "storing $file -> ${fname_fulltext##*/}..."
    chmod 644 "$file"
    mkfd "$fname_fulltext"
    mv "$file" "$fname_fulltext"
  done
  [[ $flags != *E* ]]
}

function ihep/sub:fulltext {
  local REPLY
  if ihep/fulltext/find "$1" record; then
    print "$REPLY"
  fi
}

function ihep/sub:open {
  local REPLY
  if ihep/fulltext/find "$1" record; then
    ihep/util/open "$REPLY"
  fi
}

function ihep/fulltext/push {
  local remote=$_ihep_config_remote
  [[ $remote ]] || return 1
  [[ $remote == *:* ]] || remote=$remote':~/.local/share/ihep'

  [[ -d $_ihep_base_data/fulltext ]] || return 0
  (
    cd "$_ihep_base_data/fulltext" || return 1

    local -a files=()

    # list up files to send
    if (($#)); then
      local file
      for file; do
        file=${file%.pdf}
        file=${file##*/}
        [[ $file ]] && array#push files "$file.pdf"
      done
    else
      files=(*.pdf)
    fi

    # exclude empty files
    local i
    for i in "${!files[@]}"; do
      if [[ ! -s ${files[i]} ]]; then
        mv "${files[i]}" "${files[i]}.part"
        unset -v 'files[i]'
      fi
    done
    files=("${files[@]}")

    # send files
    rsync -avz --ignore-existing "${files[@]}" "$remote"/fulltext/
  )
}

function ihep/sub:push {
  if [[ ! $_ihep_config_remote ]]; then
    print 'ihep: config "_ihep_config_remote" is not set' >&2
    return 1
  fi

  ihep/fulltext/push
}

#------------------------------------------------------------------------------

function ihep/search/.urlencode {
  REPLY=$1
  if [[ $REPLY == *[!-._~_a-zA-Z0-9]* ]]; then
    local LC_ALL=C
    local i n=${#REPLY} data=$REPLY code
    REPLY=
    for ((i = 0; i < n; i++)); do
      printf -v code %d "'${data:i:1}"
      if ((
           0x30 <= code && code <= 0x39 ||
           0x41 <= code && code <= 0x5a ||
           0x61 <= code && code <= 0x7a ||
           code == 0x2d || code == 0x2e ||
           code == 0x5f || code == 0x7e
         ))
      then
        REPLY=$REPLY${data:i:1}
      elif ((code == 0x20)); then
        REPLY=$REPLY+
      else
        printf -v code '%%%02X' "$code"
        REPLY=$REPLY$code
      fi
    done
  fi
}

#------------------------------------------------------------------------------
# search

function ihep/search {
  local q=$1
  if [[ ! $q ]]; then
    if (($#)); then
      print 'ihep: search: query is empty.' >&2
    else
      print 'usage: ihep search <query>' >&2
    fi
    return 2
  fi

  local REPLY
  ihep/search/.urlencode "$q"
  local search_url='https://inspirehep.net/api/literature?sort=mostrecent&size=25&page=1&q='$REPLY

  local tmp1=$_ihep_base_run/search.json
  mkfd "$tmp1"
  if ! dl-inspirehep "$search_url" "$tmp1"; then
    print 'ihep: failed to get the search results' >&2
    return 1
  fi

  ihep/util/node "$_ihep_base/inspire-print-search-result.js" "$tmp1"
}

function ihep/sub:search {
  ihep/search "$*"
}

#------------------------------------------------------------------------------

function ihep/sub:eval {
  builtin eval -- "$1"
}

function main {
  if declare -F "ihep/sub:$1" &>/dev/null; then
    "ihep/sub:$@"
  else
    if (($#)); then
      print "ihep: unrecognized subcommand '$1'" >&2
    else
      print 'usage: ihep <subcommand> <args>...'
    fi
    return 2
  fi
}

main "$@"
