#!/bin/bash

# 2024-06-18
_ihep_user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'

_ihep_base_data=~/.local/share/ihep
_ihep_base_state=~/.local/state/ihep
_ihep_base_run=./tmp

function string#match { [[ $1 =~ $2 ]]; }
function string#split {
  local IFS=$2 _txt=$3
  set -f
  builtin eval -- "$1=(\$_txt)"
  set +f
  return 0
}

function print { printf '%s\n' "$1"; }

function mkd {
  if [[ $1 && ! -d $1 ]]; then
    mkdir -p "$1"
  fi
}
function mkfd {
  if [[ $1 == */* ]]; then
    mkd "${1%/*}"
  fi
}

function dl {
  local url=$1 dst=$2
  local referer=
  if [[ $_ihep_cookies ]]; then
    mkfd "$_ihep_cookies"
    >> "$_ihep_cookies"
  fi
  wget \
    --no-verbose --show-progress \
    --user-agent="$_ihep_user_agent" ${referer:+--referer="$REFERER"} \
    ${_ihep_cookies:+--load-cookies "$_ihep_cookies" --save-cookies "$_ihep_cookies" --keep-session-cookies} \
    -4 --retry-on-http-error=522,524 -t 5 \
    "$url" -O "$dst.part" &&
    mv "$dst.part" "$dst"
}

function open {
  if [[ $OSTYPE == cygwin ]]; then
    cygstart "$1"
  fi
}

function dl-inspirehep {
  local _ihep_cookies=$_ihep_base_run/inspirehep.cookies.txt
  dl "$@"
}

#------------------------------------------------------------------------------
# ihep/metadata

_ihep_sep=''
_ihel_term_nl=$'\n'
function ihep/metadata/.sanitize-value {
  local _var _val
  for _var; do
    [[ ${!_var} == *["$_ihep_sep$_ihel_term_nl"]* ]] || continue
    _val=${!_var}
    _val=${_val//["$_ihep_sep$_ble_term_nl"]/ }
    printf -v "$_var" %s "$_val"
  done
}

## @var _ihep_fname_metadata
##   This is the filename that stores the metadata.  Each line consists of the
##   following fields separated by _ihep_sep (^^).
##
##   - $1 = texkey
##   - $2 = inspire
##   - $3 = arxiv
##   - $4 = url
##   - $5 = title
##   - $6 = authors
##   - $7 = abstract
##
_ihep_fname_metadata=$_ihep_base_data/literature.metadata.txt

## @fn ihep/metadata/load-by-column column value
##   @var[out] REPLY
function ihep/metadata/load-by-column {
  [[ -s $_ihep_fname_metadata ]] || return 1
  local -x value=$2
  local script='
    BEGIN { value = ENVIRON["value"]; }
    $'$1' == value { print; is_found = 1; exit 0; }
    END { if (!is_found) exit 1; }
  '
  local result=$(awk -F "$_ihep_sep" "$script" "$_ihep_fname_metadata")
  [[ $result ]] || return 1
  string#split REPLY "$_ihep_sep" "$result"
}
## @fn ihep/metadata/load-by-texkey value
##   @var[out] REPLY
function ihep/metadata/load-by-texkey {
  ihep/metadata/load-by-column 1 "$1"
}
## @fn ihep/metadata/load-by-arxiv value
##   @var[out] REPLY
function ihep/metadata/load-by-arxiv {
  ihep/metadata/load-by-column 3 "$1"
}

## @fn ihep/metadata/has-texkey texkey
function ihep/metadata/has-texkey {
  [[ -s $_ihep_fname_metadata ]] || return 1
  local -x value=$1
  local script='
    BEGIN { value = ENVIRON["value"]; }
    $1 == value { is_found = 1; exit 0; }
    END { if (!is_found) exit 1; }
  '
  awk -F "$_ihep_sep" "$script" "$_ihep_fname_metadata"
}

## @fn ihep/metadata/identify text
##   @var[out] type
##   @var[out] value
function ihep/metadata/parse {
  if string#match "$1" '^(ar[Xx]iv:)?([0-9]{4}\.[0-9]{4,5})$'; then
    type=arxiv
    value=${BASH_REMATCH[2]}
    return 0
  elif string#match "$1" '^([A-Z][a-zA-Z0-9]+):?((19|20)[0-9]{2}[a-z]{2,3})$'; then
    type=texkey
    value=${BASH_REMATCH[1]}:${BASH_REMATCH[2]}
    return 0
  elif string#match "$1" '(^|/)([0-9]{4}\.[0-9]{4,5})(v[0-9]{1,2})?( \([0-9]{1,2}\))?\.pdf$'; then
    # A file downloaded from arXiv
    type=arxiv
    value=${BASH_REMATCH[2]}
    return 0
  elif string#match "$1" '(^|/)([A-Z][a-zA-Z0-9]+):?((19|20)[0-9]{2}[a-z]{2,3})( \([0-9]{1,2}\))?\.pdf$'; then
    # A file named by inspirehep texkey
    type=texkey
    value=${BASH_REMATCH[2]}:${BASH_REMATCH[3]}
    return 0
  else
    return 1
  fi
}

## @fn ihep/metadata/load/.fetch type value
##   Retrieve data from inspirehep.net
function ihep/metadata/load/.fetch {
  local type=$1 value=$2

  local search_url=
  case $type in
  (arxiv)
    search_url='https://inspirehep.net/api/literature?sort=mostrecent&size=25&page=1&q=arXiv%3A'$value ;;
  (texkey)
    search_url='https://inspirehep.net/api/literature?sort=mostrecent&size=25&page=1&q='${value//:/'%3A'} ;;
  (*)
    print "ihep: FATAL unrecognized type '$type'" >&2
    return 1 ;;
  esac

  local tmp1=$_ihep_base_run/search.json
  mkfd "$tmp1"
  dl-inspirehep "$search_url" "$tmp1"

  local metadata
  if ! metadata=$(node inspirehep-extract-metadata.js "$tmp1"); then
    print "ihep: failed to call inspirehep-extract-metadata" >&2
    return 1
  fi
  local texkey= inspire= arxiv= url= title= authors= abstract=
  builtin eval -- "$metadata"
  if [[ ! $texkey ]]; then
    print 'ihep: failed to determine the texkey' >&2
    return 1
  fi

  ihep/metadata/.sanitize-value texkey inspire arxiv url title authors abstract
  REPLY=("$texkey" "$inspire" "$arxiv" "$url" "$title" "$authors" "$abstract")

  if ! ihep/metadata/has-texkey "$texkey"; then
    mkfd "$_ihep_fname_metadata"
    {
      printf "%s$_ihep_sep" "${REPLY[@]}"
      printf '\n'
    } >> "$_ihep_fname_metadata"
  fi

  return 0
}

function ihep/metadata/load {
  local type= value=
  if ! ihep/metadata/parse "$1"; then
    print "ihep: unrecognized query '$1'" >&2
    return 2
  fi

  case $type in
  (arxiv) ihep/metadata/load-by-arxiv "$value" && return 0 ;;
  (texkey) ihep/metadata/load-by-texkey "$value" && return 0 ;;
  esac

  ihep/metadata/load/.fetch "$type" "$value"
}

#------------------------------------------------------------------------------

function ihep/fulltext/find {
  ihep/metadata/load "$1" || return "$?"

  local texkey=${REPLY[0]} url=${REPLY[3]}

  local fname_fulltext=$_ihep_base_data/fulltext/${texkey//:}.pdf
  if [[ -s $fname_fulltext ]]; then
    # file already exists
    REPLY=$fname_fulltext
    return 0
  fi

  if [[ ! $url ]]; then
    print 'failed to determine the fulltext URL' >&2
    return 1
  fi
  mkfd "$fname_fulltext"
  if ! dl "$url" "$fname_fulltext"; then
    print 'failed to download the file.' >&2
    print "url=$url" >&2
    return 1
  fi
  REPLY=$fname_fulltext
  return 0
}

function ihep/sub:store {
  local file flags=
  for file; do
    if [[ $file != *.pdf ]]; then
      print "ihep: unrecognized file type '$file'" >&2
      flags=E$flags
      continue
    fi

    local REPLY
    if ! ihep/metadata/load "$file"; then
      print "ihep: unrecognized form of the filename '${file##*/}'" >&2
      flags=E$flags
      continue
    fi

    local texkey=${REPLY[0]}
    local fname_fulltext=$_ihep_base_data/fulltext/${texkey//:}.pdf
    if [[ -s $fname_fulltext ]]; then
      print "ihep: file '${file##*/}' already exists at '$fname_fulltext'." >&2
      flags=E$flags
      continue
    fi

    mkfd "$fname_fulltext"
    mv "$file" "$fname_fulltext"
  done
  [[ $flags != *E* ]]
}

function ihep/sub:fulltext {
  local REPLY
  if ihep/fulltext/find "$@"; then
    print "$REPLY"
  fi
}

function ihep/sub:open {
  local REPLY
  if ihep/fulltext/find "$@"; then
    open "$REPLY"
  fi
}

function ihep/sub:eval {
  builtin eval -- "$1"
}

function main {
  if declare -F "ihep/sub:$1" &>/dev/null; then
    "ihep/sub:$@"
  else
    if (($#)); then
      print "ihep: unrecognized subcommand '$1'" >&2
    else
      print 'usage: ihep <subcommand> <args>...'
    fi
    return 2
  fi
}

main "$@"
